// This schema defines the Protobuf messages used for communication with the
// Cube Market Data Service (Mendelev, MD).
//
// ### Order Book Data
//
// The market data service exposes a websocket endpoint for order book data for
// a given market at `/book/:market_id`. The order book can be consumed by both
// price level through the Market by Price (MBP) and order-by-order through the
// Market by Order (MBO). In addition, clients can subscribe to the trade stream
// and price candlesticks. Clients should submit a [`Config`](#config) and then
// process [`MdMessage`'s](#md-message).
//
// ### Aggregate Book Tops Data
//
// The market data service exposes a websocket endpoint for aggregated
// tops-of-book for all markets at `/tops`. Client should process
// [`AggMessage`](#agg-message).
//
// ### Heartbeats
//
// Application-level heartbeats are expected every 30 seconds. If more than one
// interval is missed, the market data service will disconnect the websocket.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.15.8
// source: market_data.proto

package market_data

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Side specifies whether the level, order, or diff, is for buying or selling
// the base asset.
type Side int32

const (
	// Bids buy the base asset with the quote asset.
	Side_BID Side = 0
	// Asks (or offers) sell the base asset and get the quote asset.
	Side_ASK Side = 1
)

// Enum value maps for Side.
var (
	Side_name = map[int32]string{
		0: "BID",
		1: "ASK",
	}
	Side_value = map[string]int32{
		"BID": 0,
		"ASK": 1,
	}
)

func (x Side) Enum() *Side {
	p := new(Side)
	*p = x
	return p
}

func (x Side) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Side) Descriptor() protoreflect.EnumDescriptor {
	return file_market_data_proto_enumTypes[0].Descriptor()
}

func (Side) Type() protoreflect.EnumType {
	return &file_market_data_proto_enumTypes[0]
}

func (x Side) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Side.Descriptor instead.
func (Side) EnumDescriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{0}
}

// The candlestick interval.
type KlineInterval int32

const (
	// 1 second
	KlineInterval_S1 KlineInterval = 0
	// 1 minute
	KlineInterval_M1 KlineInterval = 1
	// 15 minutes
	KlineInterval_M15 KlineInterval = 2
	// 1 hour
	KlineInterval_H1 KlineInterval = 3
	// 4 hours
	KlineInterval_H4 KlineInterval = 4
	// 1 day
	KlineInterval_D1 KlineInterval = 5
)

// Enum value maps for KlineInterval.
var (
	KlineInterval_name = map[int32]string{
		0: "S1",
		1: "M1",
		2: "M15",
		3: "H1",
		4: "H4",
		5: "D1",
	}
	KlineInterval_value = map[string]int32{
		"S1":  0,
		"M1":  1,
		"M15": 2,
		"H1":  3,
		"H4":  4,
		"D1":  5,
	}
)

func (x KlineInterval) Enum() *KlineInterval {
	p := new(KlineInterval)
	*p = x
	return p
}

func (x KlineInterval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KlineInterval) Descriptor() protoreflect.EnumDescriptor {
	return file_market_data_proto_enumTypes[1].Descriptor()
}

func (KlineInterval) Type() protoreflect.EnumType {
	return &file_market_data_proto_enumTypes[1]
}

func (x KlineInterval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KlineInterval.Descriptor instead.
func (KlineInterval) EnumDescriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{1}
}

// The side of the rate update. Given a `BASE` rate of `r`, the `QUOTE` rate is
// `1 / r`, and vice versa.
type RateUpdateSide int32

const (
	// The asset serves as the base asset for the given rate.
	RateUpdateSide_BASE RateUpdateSide = 0
	// The asset serves as the quote asset for the given rate.
	RateUpdateSide_QUOTE RateUpdateSide = 1
)

// Enum value maps for RateUpdateSide.
var (
	RateUpdateSide_name = map[int32]string{
		0: "BASE",
		1: "QUOTE",
	}
	RateUpdateSide_value = map[string]int32{
		"BASE":  0,
		"QUOTE": 1,
	}
)

func (x RateUpdateSide) Enum() *RateUpdateSide {
	p := new(RateUpdateSide)
	*p = x
	return p
}

func (x RateUpdateSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RateUpdateSide) Descriptor() protoreflect.EnumDescriptor {
	return file_market_data_proto_enumTypes[2].Descriptor()
}

func (RateUpdateSide) Type() protoreflect.EnumType {
	return &file_market_data_proto_enumTypes[2]
}

func (x RateUpdateSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RateUpdateSide.Descriptor instead.
func (RateUpdateSide) EnumDescriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{2}
}

// The operation to apply for this price level. Currently, new price levels
// are created with `REPLACE`.
type MarketByPriceDiff_DiffOp int32

const (
	MarketByPriceDiff_ADD     MarketByPriceDiff_DiffOp = 0
	MarketByPriceDiff_REMOVE  MarketByPriceDiff_DiffOp = 1
	MarketByPriceDiff_REPLACE MarketByPriceDiff_DiffOp = 2
)

// Enum value maps for MarketByPriceDiff_DiffOp.
var (
	MarketByPriceDiff_DiffOp_name = map[int32]string{
		0: "ADD",
		1: "REMOVE",
		2: "REPLACE",
	}
	MarketByPriceDiff_DiffOp_value = map[string]int32{
		"ADD":     0,
		"REMOVE":  1,
		"REPLACE": 2,
	}
)

func (x MarketByPriceDiff_DiffOp) Enum() *MarketByPriceDiff_DiffOp {
	p := new(MarketByPriceDiff_DiffOp)
	*p = x
	return p
}

func (x MarketByPriceDiff_DiffOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketByPriceDiff_DiffOp) Descriptor() protoreflect.EnumDescriptor {
	return file_market_data_proto_enumTypes[3].Descriptor()
}

func (MarketByPriceDiff_DiffOp) Type() protoreflect.EnumType {
	return &file_market_data_proto_enumTypes[3]
}

func (x MarketByPriceDiff_DiffOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarketByPriceDiff_DiffOp.Descriptor instead.
func (MarketByPriceDiff_DiffOp) EnumDescriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{2, 0}
}

// The operation to apply for this price level. For example, an resting order
// that gets filled will be `REPLACE`'d with the new resting quantity. An
// order is `REMOVE`'d when it is fully filled or canceled.
type MarketByOrderDiff_DiffOp int32

const (
	MarketByOrderDiff_ADD     MarketByOrderDiff_DiffOp = 0
	MarketByOrderDiff_REMOVE  MarketByOrderDiff_DiffOp = 1
	MarketByOrderDiff_REPLACE MarketByOrderDiff_DiffOp = 2
)

// Enum value maps for MarketByOrderDiff_DiffOp.
var (
	MarketByOrderDiff_DiffOp_name = map[int32]string{
		0: "ADD",
		1: "REMOVE",
		2: "REPLACE",
	}
	MarketByOrderDiff_DiffOp_value = map[string]int32{
		"ADD":     0,
		"REMOVE":  1,
		"REPLACE": 2,
	}
)

func (x MarketByOrderDiff_DiffOp) Enum() *MarketByOrderDiff_DiffOp {
	p := new(MarketByOrderDiff_DiffOp)
	*p = x
	return p
}

func (x MarketByOrderDiff_DiffOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketByOrderDiff_DiffOp) Descriptor() protoreflect.EnumDescriptor {
	return file_market_data_proto_enumTypes[4].Descriptor()
}

func (MarketByOrderDiff_DiffOp) Type() protoreflect.EnumType {
	return &file_market_data_proto_enumTypes[4]
}

func (x MarketByOrderDiff_DiffOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarketByOrderDiff_DiffOp.Descriptor instead.
func (MarketByOrderDiff_DiffOp) EnumDescriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{4, 0}
}

// Every exchange message from `/book/:market_id` will be wrapped as an
// [`MdMessages`](#md-messages) which contains multiple `MdMessage`'s.
type MdMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Inner:
	//
	//	*MdMessage_Heartbeat
	//	*MdMessage_Summary
	//	*MdMessage_Trades
	//	*MdMessage_MboSnapshot
	//	*MdMessage_MboDiff
	//	*MdMessage_MbpSnapshot
	//	*MdMessage_MbpDiff
	//	*MdMessage_Kline
	Inner isMdMessage_Inner `protobuf_oneof:"inner"`
}

func (x *MdMessage) Reset() {
	*x = MdMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdMessage) ProtoMessage() {}

func (x *MdMessage) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdMessage.ProtoReflect.Descriptor instead.
func (*MdMessage) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{0}
}

func (m *MdMessage) GetInner() isMdMessage_Inner {
	if m != nil {
		return m.Inner
	}
	return nil
}

func (x *MdMessage) GetHeartbeat() *Heartbeat {
	if x, ok := x.GetInner().(*MdMessage_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

func (x *MdMessage) GetSummary() *Summary {
	if x, ok := x.GetInner().(*MdMessage_Summary); ok {
		return x.Summary
	}
	return nil
}

func (x *MdMessage) GetTrades() *Trades {
	if x, ok := x.GetInner().(*MdMessage_Trades); ok {
		return x.Trades
	}
	return nil
}

func (x *MdMessage) GetMboSnapshot() *MarketByOrder {
	if x, ok := x.GetInner().(*MdMessage_MboSnapshot); ok {
		return x.MboSnapshot
	}
	return nil
}

func (x *MdMessage) GetMboDiff() *MarketByOrderDiff {
	if x, ok := x.GetInner().(*MdMessage_MboDiff); ok {
		return x.MboDiff
	}
	return nil
}

func (x *MdMessage) GetMbpSnapshot() *MarketByPrice {
	if x, ok := x.GetInner().(*MdMessage_MbpSnapshot); ok {
		return x.MbpSnapshot
	}
	return nil
}

func (x *MdMessage) GetMbpDiff() *MarketByPriceDiff {
	if x, ok := x.GetInner().(*MdMessage_MbpDiff); ok {
		return x.MbpDiff
	}
	return nil
}

func (x *MdMessage) GetKline() *Kline {
	if x, ok := x.GetInner().(*MdMessage_Kline); ok {
		return x.Kline
	}
	return nil
}

type isMdMessage_Inner interface {
	isMdMessage_Inner()
}

type MdMessage_Heartbeat struct {
	// Server heartbeat reply
	Heartbeat *Heartbeat `protobuf:"bytes,1,opt,name=heartbeat,proto3,oneof"`
}

type MdMessage_Summary struct {
	// 24h summary
	Summary *Summary `protobuf:"bytes,2,opt,name=summary,proto3,oneof"`
}

type MdMessage_Trades struct {
	// Recent trades
	Trades *Trades `protobuf:"bytes,3,opt,name=trades,proto3,oneof"`
}

type MdMessage_MboSnapshot struct {
	// Market by order snapshot
	MboSnapshot *MarketByOrder `protobuf:"bytes,4,opt,name=mboSnapshot,proto3,oneof"`
}

type MdMessage_MboDiff struct {
	// Market by order diff
	MboDiff *MarketByOrderDiff `protobuf:"bytes,5,opt,name=mboDiff,proto3,oneof"`
}

type MdMessage_MbpSnapshot struct {
	// Market by price snapshot
	MbpSnapshot *MarketByPrice `protobuf:"bytes,6,opt,name=mbpSnapshot,proto3,oneof"`
}

type MdMessage_MbpDiff struct {
	// Market by price diff
	MbpDiff *MarketByPriceDiff `protobuf:"bytes,7,opt,name=mbpDiff,proto3,oneof"`
}

type MdMessage_Kline struct {
	// Candlestick
	Kline *Kline `protobuf:"bytes,8,opt,name=kline,proto3,oneof"`
}

func (*MdMessage_Heartbeat) isMdMessage_Inner() {}

func (*MdMessage_Summary) isMdMessage_Inner() {}

func (*MdMessage_Trades) isMdMessage_Inner() {}

func (*MdMessage_MboSnapshot) isMdMessage_Inner() {}

func (*MdMessage_MboDiff) isMdMessage_Inner() {}

func (*MdMessage_MbpSnapshot) isMdMessage_Inner() {}

func (*MdMessage_MbpDiff) isMdMessage_Inner() {}

func (*MdMessage_Kline) isMdMessage_Inner() {}

// Market by price snapshot message. This is chunked into `numChunks` and starts
// with `chunk = 0`. A snapshot is sent on first connect. `Level`'s should be
// concatened until `chunk = numChunks - 1`. Currently, the chunks and levels
// are streamed from tightest price level outwards with interleaved Bid and Ask
// levels, but no ordering is guaranteed.
type MarketByPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Levels    []*MarketByPrice_Level `protobuf:"bytes,1,rep,name=levels,proto3" json:"levels,omitempty"`
	Chunk     uint32                 `protobuf:"varint,2,opt,name=chunk,proto3" json:"chunk,omitempty"`
	NumChunks uint32                 `protobuf:"varint,3,opt,name=numChunks,proto3" json:"numChunks,omitempty"`
}

func (x *MarketByPrice) Reset() {
	*x = MarketByPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketByPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketByPrice) ProtoMessage() {}

func (x *MarketByPrice) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketByPrice.ProtoReflect.Descriptor instead.
func (*MarketByPrice) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{1}
}

func (x *MarketByPrice) GetLevels() []*MarketByPrice_Level {
	if x != nil {
		return x.Levels
	}
	return nil
}

func (x *MarketByPrice) GetChunk() uint32 {
	if x != nil {
		return x.Chunk
	}
	return 0
}

func (x *MarketByPrice) GetNumChunks() uint32 {
	if x != nil {
		return x.NumChunks
	}
	return 0
}

// Market by price diff message. Book updates for the MBP feed are sent as diffs
// after the initial snapshot. The number of total side levels are for
// reconciliation.
type MarketByPriceDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diffs []*MarketByPriceDiff_Diff `protobuf:"bytes,1,rep,name=diffs,proto3" json:"diffs,omitempty"`
	// Total number of bid levels after this diff is applied.
	TotalBidLevels uint32 `protobuf:"varint,2,opt,name=totalBidLevels,proto3" json:"totalBidLevels,omitempty"`
	// Total number of ask levels after this diff is applied.
	TotalAskLevels uint32 `protobuf:"varint,3,opt,name=totalAskLevels,proto3" json:"totalAskLevels,omitempty"`
}

func (x *MarketByPriceDiff) Reset() {
	*x = MarketByPriceDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketByPriceDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketByPriceDiff) ProtoMessage() {}

func (x *MarketByPriceDiff) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketByPriceDiff.ProtoReflect.Descriptor instead.
func (*MarketByPriceDiff) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{2}
}

func (x *MarketByPriceDiff) GetDiffs() []*MarketByPriceDiff_Diff {
	if x != nil {
		return x.Diffs
	}
	return nil
}

func (x *MarketByPriceDiff) GetTotalBidLevels() uint32 {
	if x != nil {
		return x.TotalBidLevels
	}
	return 0
}

func (x *MarketByPriceDiff) GetTotalAskLevels() uint32 {
	if x != nil {
		return x.TotalAskLevels
	}
	return 0
}

// Market by order snapshot message. This is chunked into `numChunks` and starts
// with `chunk = 0`. A snapshot is sent on first connect. `Level`'s should be
// concatened until `chunk = numChunks - 1`. Orders are sent in order of FIFO
// queue priority so the first order of a level should be the first order to be
// matched when that level is aggressed.
type MarketByOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders    []*MarketByOrder_Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	Chunk     uint32                 `protobuf:"varint,2,opt,name=chunk,proto3" json:"chunk,omitempty"`
	NumChunks uint32                 `protobuf:"varint,3,opt,name=numChunks,proto3" json:"numChunks,omitempty"`
}

func (x *MarketByOrder) Reset() {
	*x = MarketByOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketByOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketByOrder) ProtoMessage() {}

func (x *MarketByOrder) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketByOrder.ProtoReflect.Descriptor instead.
func (*MarketByOrder) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{3}
}

func (x *MarketByOrder) GetOrders() []*MarketByOrder_Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *MarketByOrder) GetChunk() uint32 {
	if x != nil {
		return x.Chunk
	}
	return 0
}

func (x *MarketByOrder) GetNumChunks() uint32 {
	if x != nil {
		return x.NumChunks
	}
	return 0
}

// Market by order diff message. Book updates for the MBO feed are sent as diffs
// after the initial snapshot. The number of total side levels and orders are
// for reconciliation.
//
// Note that for orders that are cancel-replace'd (a modify that lost queue
// priority), the new price and quantity will be reported as a `REPLACE` but the
// exchange order ID will not change.
type MarketByOrderDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diffs []*MarketByOrderDiff_Diff `protobuf:"bytes,1,rep,name=diffs,proto3" json:"diffs,omitempty"`
	// Total number of bid levels after this diff is applied.
	TotalBidLevels uint32 `protobuf:"varint,2,opt,name=totalBidLevels,proto3" json:"totalBidLevels,omitempty"`
	// Total number of ask levels after this diff is applied.
	TotalAskLevels uint32 `protobuf:"varint,3,opt,name=totalAskLevels,proto3" json:"totalAskLevels,omitempty"`
	// Total number of bid orders after this diff is applied.
	TotalBidOrders uint32 `protobuf:"varint,4,opt,name=totalBidOrders,proto3" json:"totalBidOrders,omitempty"`
	// Total number of ask orders after this diff is applied.
	TotalAskOrders uint32 `protobuf:"varint,5,opt,name=totalAskOrders,proto3" json:"totalAskOrders,omitempty"`
}

func (x *MarketByOrderDiff) Reset() {
	*x = MarketByOrderDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketByOrderDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketByOrderDiff) ProtoMessage() {}

func (x *MarketByOrderDiff) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketByOrderDiff.ProtoReflect.Descriptor instead.
func (*MarketByOrderDiff) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{4}
}

func (x *MarketByOrderDiff) GetDiffs() []*MarketByOrderDiff_Diff {
	if x != nil {
		return x.Diffs
	}
	return nil
}

func (x *MarketByOrderDiff) GetTotalBidLevels() uint32 {
	if x != nil {
		return x.TotalBidLevels
	}
	return 0
}

func (x *MarketByOrderDiff) GetTotalAskLevels() uint32 {
	if x != nil {
		return x.TotalAskLevels
	}
	return 0
}

func (x *MarketByOrderDiff) GetTotalBidOrders() uint32 {
	if x != nil {
		return x.TotalBidOrders
	}
	return 0
}

func (x *MarketByOrderDiff) GetTotalAskOrders() uint32 {
	if x != nil {
		return x.TotalAskOrders
	}
	return 0
}

// Trades since the latest `Trades` message. The result of the trades will also
// appear in the MBP and MBO feeds independently as updates to the resting
// orders and levels, respectively.
type Trades struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trades []*Trades_Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *Trades) Reset() {
	*x = Trades{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trades) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trades) ProtoMessage() {}

func (x *Trades) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trades.ProtoReflect.Descriptor instead.
func (*Trades) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{5}
}

func (x *Trades) GetTrades() []*Trades_Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

// Rolling 24h stats.
type Summary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 24h open price
	Open uint64 `protobuf:"varint,1,opt,name=open,proto3" json:"open,omitempty"`
	// Latest price
	Close uint64 `protobuf:"varint,2,opt,name=close,proto3" json:"close,omitempty"`
	// 24h low price
	Low uint64 `protobuf:"varint,3,opt,name=low,proto3" json:"low,omitempty"`
	// 24h high price
	High uint64 `protobuf:"varint,4,opt,name=high,proto3" json:"high,omitempty"`
	// Low 64-bits of the base quantity traded
	BaseVolumeLo uint64 `protobuf:"varint,5,opt,name=baseVolumeLo,proto3" json:"baseVolumeLo,omitempty"`
	// High 64-bits of the base quantity traded
	BaseVolumeHi uint64 `protobuf:"varint,6,opt,name=baseVolumeHi,proto3" json:"baseVolumeHi,omitempty"`
	// Low 64-bits of the quote quantity traded
	QuoteVolumeLo uint64 `protobuf:"varint,7,opt,name=quoteVolumeLo,proto3" json:"quoteVolumeLo,omitempty"`
	// High 64-bits of the quote quantity traded
	QuoteVolumeHi uint64 `protobuf:"varint,8,opt,name=quoteVolumeHi,proto3" json:"quoteVolumeHi,omitempty"`
}

func (x *Summary) Reset() {
	*x = Summary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Summary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Summary) ProtoMessage() {}

func (x *Summary) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Summary.ProtoReflect.Descriptor instead.
func (*Summary) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{6}
}

func (x *Summary) GetOpen() uint64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *Summary) GetClose() uint64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *Summary) GetLow() uint64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *Summary) GetHigh() uint64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Summary) GetBaseVolumeLo() uint64 {
	if x != nil {
		return x.BaseVolumeLo
	}
	return 0
}

func (x *Summary) GetBaseVolumeHi() uint64 {
	if x != nil {
		return x.BaseVolumeHi
	}
	return 0
}

func (x *Summary) GetQuoteVolumeLo() uint64 {
	if x != nil {
		return x.QuoteVolumeLo
	}
	return 0
}

func (x *Summary) GetQuoteVolumeHi() uint64 {
	if x != nil {
		return x.QuoteVolumeHi
	}
	return 0
}

// Candlestick bar.
type Kline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval KlineInterval `protobuf:"varint,1,opt,name=interval,proto3,enum=md.KlineInterval" json:"interval,omitempty"`
	// The unix nanosecond timestamp that this kline covers.
	StartTime uint64 `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// Kline open price.
	Open uint64 `protobuf:"varint,3,opt,name=open,proto3" json:"open,omitempty"`
	// Kline close price.
	Close uint64 `protobuf:"varint,4,opt,name=close,proto3" json:"close,omitempty"`
	// Kline high price.
	High uint64 `protobuf:"varint,5,opt,name=high,proto3" json:"high,omitempty"`
	// Kline low price.
	Low uint64 `protobuf:"varint,6,opt,name=low,proto3" json:"low,omitempty"`
	// Low 64-bits of the base quantity traded.
	VolumeLo uint64 `protobuf:"varint,7,opt,name=volumeLo,proto3" json:"volumeLo,omitempty"`
	// High 64-bits of the base quantity traded.
	VolumeHi uint64 `protobuf:"varint,8,opt,name=volumeHi,proto3" json:"volumeHi,omitempty"`
}

func (x *Kline) Reset() {
	*x = Kline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kline) ProtoMessage() {}

func (x *Kline) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kline.ProtoReflect.Descriptor instead.
func (*Kline) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{7}
}

func (x *Kline) GetInterval() KlineInterval {
	if x != nil {
		return x.Interval
	}
	return KlineInterval_S1
}

func (x *Kline) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Kline) GetOpen() uint64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *Kline) GetClose() uint64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *Kline) GetHigh() uint64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Kline) GetLow() uint64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *Kline) GetVolumeLo() uint64 {
	if x != nil {
		return x.VolumeLo
	}
	return 0
}

func (x *Kline) GetVolumeHi() uint64 {
	if x != nil {
		return x.VolumeHi
	}
	return 0
}

// A client and server heartbeat. The heartbeat reply, including the timestamp
// value, comes from the market data service.
type Heartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A request ID that is echoed back on the Heartbeat
	RequestId uint64 `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{8}
}

func (x *Heartbeat) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *Heartbeat) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type MdMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*MdMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *MdMessages) Reset() {
	*x = MdMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdMessages) ProtoMessage() {}

func (x *MdMessages) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdMessages.ProtoReflect.Descriptor instead.
func (*MdMessages) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{9}
}

func (x *MdMessages) GetMessages() []*MdMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

// Every exchange message from `/tops` will be wrapped as an `AggMessage`.
type AggMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Inner:
	//
	//	*AggMessage_Heartbeat
	//	*AggMessage_TopOfBooks
	//	*AggMessage_RateUpdates
	Inner isAggMessage_Inner `protobuf_oneof:"inner"`
}

func (x *AggMessage) Reset() {
	*x = AggMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggMessage) ProtoMessage() {}

func (x *AggMessage) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggMessage.ProtoReflect.Descriptor instead.
func (*AggMessage) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{10}
}

func (m *AggMessage) GetInner() isAggMessage_Inner {
	if m != nil {
		return m.Inner
	}
	return nil
}

func (x *AggMessage) GetHeartbeat() *Heartbeat {
	if x, ok := x.GetInner().(*AggMessage_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

func (x *AggMessage) GetTopOfBooks() *TopOfBooks {
	if x, ok := x.GetInner().(*AggMessage_TopOfBooks); ok {
		return x.TopOfBooks
	}
	return nil
}

func (x *AggMessage) GetRateUpdates() *RateUpdates {
	if x, ok := x.GetInner().(*AggMessage_RateUpdates); ok {
		return x.RateUpdates
	}
	return nil
}

type isAggMessage_Inner interface {
	isAggMessage_Inner()
}

type AggMessage_Heartbeat struct {
	// Server heartbeat reply
	Heartbeat *Heartbeat `protobuf:"bytes,1,opt,name=heartbeat,proto3,oneof"`
}

type AggMessage_TopOfBooks struct {
	// Top of books
	TopOfBooks *TopOfBooks `protobuf:"bytes,2,opt,name=topOfBooks,proto3,oneof"`
}

type AggMessage_RateUpdates struct {
	// Rates for all assets
	RateUpdates *RateUpdates `protobuf:"bytes,3,opt,name=rateUpdates,proto3,oneof"`
}

func (*AggMessage_Heartbeat) isAggMessage_Inner() {}

func (*AggMessage_TopOfBooks) isAggMessage_Inner() {}

func (*AggMessage_RateUpdates) isAggMessage_Inner() {}

// Top of book
type TopOfBook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId uint64 `protobuf:"varint,1,opt,name=marketId,proto3" json:"marketId,omitempty"`
	// The [transact time](/docs/api_reference/trade#transact-time) of the latest
	// book update on this market.
	TransactTime uint64 `protobuf:"varint,2,opt,name=transactTime,proto3" json:"transactTime,omitempty"`
	// The best bid price.
	BidPrice uint64 `protobuf:"varint,3,opt,name=bidPrice,proto3" json:"bidPrice,omitempty"`
	// The total bid quantity at the best bid price.
	BidQuantity uint64 `protobuf:"varint,4,opt,name=bidQuantity,proto3" json:"bidQuantity,omitempty"`
	// The best ask price.
	AskPrice uint64 `protobuf:"varint,5,opt,name=askPrice,proto3" json:"askPrice,omitempty"`
	// The total ask quantity at the best ask price.
	AskQuantity uint64 `protobuf:"varint,6,opt,name=askQuantity,proto3" json:"askQuantity,omitempty"`
	// The last trade price.
	LastPrice uint64 `protobuf:"varint,7,opt,name=lastPrice,proto3" json:"lastPrice,omitempty"`
	// The 24h open price.
	Rolling24HPrice uint64 `protobuf:"varint,8,opt,name=rolling24hPrice,proto3" json:"rolling24hPrice,omitempty"`
}

func (x *TopOfBook) Reset() {
	*x = TopOfBook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopOfBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopOfBook) ProtoMessage() {}

func (x *TopOfBook) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopOfBook.ProtoReflect.Descriptor instead.
func (*TopOfBook) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{11}
}

func (x *TopOfBook) GetMarketId() uint64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *TopOfBook) GetTransactTime() uint64 {
	if x != nil {
		return x.TransactTime
	}
	return 0
}

func (x *TopOfBook) GetBidPrice() uint64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *TopOfBook) GetBidQuantity() uint64 {
	if x != nil {
		return x.BidQuantity
	}
	return 0
}

func (x *TopOfBook) GetAskPrice() uint64 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *TopOfBook) GetAskQuantity() uint64 {
	if x != nil {
		return x.AskQuantity
	}
	return 0
}

func (x *TopOfBook) GetLastPrice() uint64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *TopOfBook) GetRolling24HPrice() uint64 {
	if x != nil {
		return x.Rolling24HPrice
	}
	return 0
}

// Top of books for all books that were updates since the last top-of-books
// message.
type TopOfBooks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tops []*TopOfBook `protobuf:"bytes,1,rep,name=tops,proto3" json:"tops,omitempty"`
}

func (x *TopOfBooks) Reset() {
	*x = TopOfBooks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopOfBooks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopOfBooks) ProtoMessage() {}

func (x *TopOfBooks) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopOfBooks.ProtoReflect.Descriptor instead.
func (*TopOfBooks) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{12}
}

func (x *TopOfBooks) GetTops() []*TopOfBook {
	if x != nil {
		return x.Tops
	}
	return nil
}

// Rate update. Used in conjuction with another rate update to get the price of
// that divisor. Rate's should not be used alone. For example, given a
// RateUpdate for `assetId = BTC, updateSide = BASE` of `r1`, and `assetId =
// EUR, updateSide = QUOTE` of `r2`, the BTC-EUR price estimate is `r1 * r2`.
type RateUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId uint64 `protobuf:"varint,1,opt,name=assetId,proto3" json:"assetId,omitempty"`
	// The nanosecond timestamp of the update.
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The asset rate at the given timestamp.
	Rate uint64         `protobuf:"varint,3,opt,name=rate,proto3" json:"rate,omitempty"`
	Side RateUpdateSide `protobuf:"varint,4,opt,name=side,proto3,enum=md.RateUpdateSide" json:"side,omitempty"`
}

func (x *RateUpdate) Reset() {
	*x = RateUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateUpdate) ProtoMessage() {}

func (x *RateUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateUpdate.ProtoReflect.Descriptor instead.
func (*RateUpdate) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{13}
}

func (x *RateUpdate) GetAssetId() uint64 {
	if x != nil {
		return x.AssetId
	}
	return 0
}

func (x *RateUpdate) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RateUpdate) GetRate() uint64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *RateUpdate) GetSide() RateUpdateSide {
	if x != nil {
		return x.Side
	}
	return RateUpdateSide_BASE
}

// Rates for all assets. Published on connect and updates since the last
// rate-updates message.
type RateUpdates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates []*RateUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (x *RateUpdates) Reset() {
	*x = RateUpdates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateUpdates) ProtoMessage() {}

func (x *RateUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateUpdates.ProtoReflect.Descriptor instead.
func (*RateUpdates) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{14}
}

func (x *RateUpdates) GetUpdates() []*RateUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

// Client heartbeats and configs. This wrapper is used for both
// `/book/:market_id` and `/tops`, but `config` messages are ignored on the
// latter.
type ClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Inner:
	//
	//	*ClientMessage_Heartbeat
	//	*ClientMessage_Config
	Inner isClientMessage_Inner `protobuf_oneof:"inner"`
}

func (x *ClientMessage) Reset() {
	*x = ClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMessage) ProtoMessage() {}

func (x *ClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMessage.ProtoReflect.Descriptor instead.
func (*ClientMessage) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{15}
}

func (m *ClientMessage) GetInner() isClientMessage_Inner {
	if m != nil {
		return m.Inner
	}
	return nil
}

func (x *ClientMessage) GetHeartbeat() *Heartbeat {
	if x, ok := x.GetInner().(*ClientMessage_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

func (x *ClientMessage) GetConfig() *Config {
	if x, ok := x.GetInner().(*ClientMessage_Config); ok {
		return x.Config
	}
	return nil
}

type isClientMessage_Inner interface {
	isClientMessage_Inner()
}

type ClientMessage_Heartbeat struct {
	Heartbeat *Heartbeat `protobuf:"bytes,1,opt,name=heartbeat,proto3,oneof"`
}

type ClientMessage_Config struct {
	Config *Config `protobuf:"bytes,2,opt,name=config,proto3,oneof"`
}

func (*ClientMessage_Heartbeat) isClientMessage_Inner() {}

func (*ClientMessage_Config) isClientMessage_Inner() {}

// Set the message subscriptions for `/book/:market_id`. At most one of `mbp`
// and `mbo` can be set.
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable MBP feeds
	Mbp bool `protobuf:"varint,1,opt,name=mbp,proto3" json:"mbp,omitempty"`
	// Enable MBO feeds
	Mbo bool `protobuf:"varint,2,opt,name=mbo,proto3" json:"mbo,omitempty"`
	// Enable recent trades
	Trades bool `protobuf:"varint,3,opt,name=trades,proto3" json:"trades,omitempty"`
	// Enable 24h summary
	Summary bool `protobuf:"varint,4,opt,name=summary,proto3" json:"summary,omitempty"`
	// Enable price klines
	Klines []KlineInterval `protobuf:"varint,5,rep,packed,name=klines,proto3,enum=md.KlineInterval" json:"klines,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{16}
}

func (x *Config) GetMbp() bool {
	if x != nil {
		return x.Mbp
	}
	return false
}

func (x *Config) GetMbo() bool {
	if x != nil {
		return x.Mbo
	}
	return false
}

func (x *Config) GetTrades() bool {
	if x != nil {
		return x.Trades
	}
	return false
}

func (x *Config) GetSummary() bool {
	if x != nil {
		return x.Summary
	}
	return false
}

func (x *Config) GetKlines() []KlineInterval {
	if x != nil {
		return x.Klines
	}
	return nil
}

// Each price level is the aggregate total quantity of orders placed at that
// price.
type MarketByPrice_Level struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price    uint64 `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`
	Quantity uint64 `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Side     Side   `protobuf:"varint,3,opt,name=side,proto3,enum=md.Side" json:"side,omitempty"`
}

func (x *MarketByPrice_Level) Reset() {
	*x = MarketByPrice_Level{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketByPrice_Level) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketByPrice_Level) ProtoMessage() {}

func (x *MarketByPrice_Level) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketByPrice_Level.ProtoReflect.Descriptor instead.
func (*MarketByPrice_Level) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{1, 0}
}

func (x *MarketByPrice_Level) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketByPrice_Level) GetQuantity() uint64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *MarketByPrice_Level) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_BID
}

// A price level diff overwrites the existing price level.
type MarketByPriceDiff_Diff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price    uint64                   `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`
	Quantity uint64                   `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Side     Side                     `protobuf:"varint,3,opt,name=side,proto3,enum=md.Side" json:"side,omitempty"`
	Op       MarketByPriceDiff_DiffOp `protobuf:"varint,4,opt,name=op,proto3,enum=md.MarketByPriceDiff_DiffOp" json:"op,omitempty"`
}

func (x *MarketByPriceDiff_Diff) Reset() {
	*x = MarketByPriceDiff_Diff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketByPriceDiff_Diff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketByPriceDiff_Diff) ProtoMessage() {}

func (x *MarketByPriceDiff_Diff) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketByPriceDiff_Diff.ProtoReflect.Descriptor instead.
func (*MarketByPriceDiff_Diff) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{2, 0}
}

func (x *MarketByPriceDiff_Diff) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketByPriceDiff_Diff) GetQuantity() uint64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *MarketByPriceDiff_Diff) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_BID
}

func (x *MarketByPriceDiff_Diff) GetOp() MarketByPriceDiff_DiffOp {
	if x != nil {
		return x.Op
	}
	return MarketByPriceDiff_ADD
}

// A resting order.
type MarketByOrder_Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price    uint64 `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`
	Quantity uint64 `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// [Exchange order ID](/docs/api_reference/trade#exchange-order-id)
	ExchangeOrderId uint64 `protobuf:"varint,3,opt,name=exchangeOrderId,proto3" json:"exchangeOrderId,omitempty"`
	Side            Side   `protobuf:"varint,4,opt,name=side,proto3,enum=md.Side" json:"side,omitempty"`
}

func (x *MarketByOrder_Order) Reset() {
	*x = MarketByOrder_Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketByOrder_Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketByOrder_Order) ProtoMessage() {}

func (x *MarketByOrder_Order) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketByOrder_Order.ProtoReflect.Descriptor instead.
func (*MarketByOrder_Order) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{3, 0}
}

func (x *MarketByOrder_Order) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketByOrder_Order) GetQuantity() uint64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *MarketByOrder_Order) GetExchangeOrderId() uint64 {
	if x != nil {
		return x.ExchangeOrderId
	}
	return 0
}

func (x *MarketByOrder_Order) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_BID
}

// An order diff creates, updates, or deletes a resting order based on the
// `exchangeOrderId`
type MarketByOrderDiff_Diff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price    uint64 `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`
	Quantity uint64 `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// [Exchange order ID](/docs/api_reference/trade#exchange-order-id)
	ExchangeOrderId uint64                   `protobuf:"varint,3,opt,name=exchangeOrderId,proto3" json:"exchangeOrderId,omitempty"`
	Side            Side                     `protobuf:"varint,4,opt,name=side,proto3,enum=md.Side" json:"side,omitempty"`
	Op              MarketByOrderDiff_DiffOp `protobuf:"varint,5,opt,name=op,proto3,enum=md.MarketByOrderDiff_DiffOp" json:"op,omitempty"`
}

func (x *MarketByOrderDiff_Diff) Reset() {
	*x = MarketByOrderDiff_Diff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketByOrderDiff_Diff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketByOrderDiff_Diff) ProtoMessage() {}

func (x *MarketByOrderDiff_Diff) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketByOrderDiff_Diff.ProtoReflect.Descriptor instead.
func (*MarketByOrderDiff_Diff) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{4, 0}
}

func (x *MarketByOrderDiff_Diff) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketByOrderDiff_Diff) GetQuantity() uint64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *MarketByOrderDiff_Diff) GetExchangeOrderId() uint64 {
	if x != nil {
		return x.ExchangeOrderId
	}
	return 0
}

func (x *MarketByOrderDiff_Diff) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_BID
}

func (x *MarketByOrderDiff_Diff) GetOp() MarketByOrderDiff_DiffOp {
	if x != nil {
		return x.Op
	}
	return MarketByOrderDiff_ADD
}

type Trades_Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID assigned to this trade. All trades that occur from the same event
	// will be assigned the same ID, and are considered to be an atomic batch.
	TradeId uint64 `protobuf:"varint,1,opt,name=tradeId,proto3" json:"tradeId,omitempty"`
	// The price that this trade occurred at.
	Price uint64 `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	// The side of the aggressing order.
	AggressingSide Side `protobuf:"varint,3,opt,name=aggressingSide,proto3,enum=md.Side" json:"aggressingSide,omitempty"`
	// The [Exchange order ID](/docs/api_reference/trade#exchange-order-id) of
	// the resting order.
	RestingExchangeOrderId uint64 `protobuf:"varint,4,opt,name=restingExchangeOrderId,proto3" json:"restingExchangeOrderId,omitempty"`
	FillQuantity           uint64 `protobuf:"varint,5,opt,name=fillQuantity,proto3" json:"fillQuantity,omitempty"`
	// The [transact time](/docs/api_reference/trade#transact-time) assigned by
	// the matching engine for this trade. All trades that occur from the same
	// event will be assigned the same transact time.
	TransactTime uint64 `protobuf:"varint,6,opt,name=transactTime,proto3" json:"transactTime,omitempty"`
	// The [Exchange order ID](/docs/api_reference/trade#exchange-order-id) of
	// the aggressing order.
	AggressingExchangeOrderId uint64 `protobuf:"varint,7,opt,name=aggressingExchangeOrderId,proto3" json:"aggressingExchangeOrderId,omitempty"`
}

func (x *Trades_Trade) Reset() {
	*x = Trades_Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trades_Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trades_Trade) ProtoMessage() {}

func (x *Trades_Trade) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trades_Trade.ProtoReflect.Descriptor instead.
func (*Trades_Trade) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Trades_Trade) GetTradeId() uint64 {
	if x != nil {
		return x.TradeId
	}
	return 0
}

func (x *Trades_Trade) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Trades_Trade) GetAggressingSide() Side {
	if x != nil {
		return x.AggressingSide
	}
	return Side_BID
}

func (x *Trades_Trade) GetRestingExchangeOrderId() uint64 {
	if x != nil {
		return x.RestingExchangeOrderId
	}
	return 0
}

func (x *Trades_Trade) GetFillQuantity() uint64 {
	if x != nil {
		return x.FillQuantity
	}
	return 0
}

func (x *Trades_Trade) GetTransactTime() uint64 {
	if x != nil {
		return x.TransactTime
	}
	return 0
}

func (x *Trades_Trade) GetAggressingExchangeOrderId() uint64 {
	if x != nil {
		return x.AggressingExchangeOrderId
	}
	return 0
}

var File_market_data_proto protoreflect.FileDescriptor

var file_market_data_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x02, 0x6d, 0x64, 0x22, 0x89, 0x03, 0x0a, 0x09, 0x4d, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x64, 0x2e, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6d, 0x64, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x24, 0x0a,
	0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x6d, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x6d, 0x62, 0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x64, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x6d,
	0x62, 0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x62,
	0x6f, 0x44, 0x69, 0x66, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x64,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69,
	0x66, 0x66, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x62, 0x6f, 0x44, 0x69, 0x66, 0x66, 0x12, 0x35, 0x0a,
	0x0b, 0x6d, 0x62, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x79,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x62, 0x70, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x62, 0x70, 0x44, 0x69, 0x66, 0x66, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x42, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x69, 0x66, 0x66, 0x48, 0x00, 0x52, 0x07,
	0x6d, 0x62, 0x70, 0x44, 0x69, 0x66, 0x66, 0x12, 0x21, 0x0a, 0x05, 0x6b, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6d, 0x64, 0x2e, 0x4b, 0x6c, 0x69, 0x6e,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x22, 0xcd, 0x01, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x79,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x42, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x06,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x75, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x1a, 0x57, 0x0a, 0x05, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x6d, 0x64, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73,
	0x69, 0x64, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x79,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x69, 0x66, 0x66, 0x12, 0x30, 0x0a, 0x05, 0x64, 0x69, 0x66,
	0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x64, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x69, 0x66, 0x66, 0x2e,
	0x44, 0x69, 0x66, 0x66, 0x52, 0x05, 0x64, 0x69, 0x66, 0x66, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x69, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x69, 0x64, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x6b, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x1a, 0x84, 0x01, 0x0a, 0x04,
	0x44, 0x69, 0x66, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x6d, 0x64, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04,
	0x73, 0x69, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x44, 0x69, 0x66, 0x66, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x4f, 0x70, 0x52, 0x02,
	0x6f, 0x70, 0x22, 0x2a, 0x0a, 0x06, 0x44, 0x69, 0x66, 0x66, 0x4f, 0x70, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x02, 0x22, 0xf8,
	0x01, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x2f, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x1a, 0x81, 0x01, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x73,
	0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x6d, 0x64, 0x2e, 0x53,
	0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x22, 0xc2, 0x03, 0x0a, 0x11, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x66, 0x66, 0x12,
	0x30, 0x0a, 0x05, 0x64, 0x69, 0x66, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x69, 0x66, 0x66, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x52, 0x05, 0x64, 0x69, 0x66, 0x66,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x69, 0x64, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x69, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x69, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x1a, 0xae, 0x01, 0x0a, 0x04, 0x44, 0x69, 0x66, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x6d, 0x64, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04,
	0x73, 0x69, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x69, 0x66, 0x66, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x4f, 0x70, 0x52, 0x02,
	0x6f, 0x70, 0x22, 0x2a, 0x0a, 0x06, 0x44, 0x69, 0x66, 0x66, 0x4f, 0x70, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x02, 0x22, 0xdc,
	0x02, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x64, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x1a, 0xa7, 0x02, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a,
	0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x6d, 0x64, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52,
	0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x64, 0x65, 0x12,
	0x36, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x16, 0x72, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x66,
	0x69, 0x6c, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3c, 0x0a, 0x19, 0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x19, 0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xed, 0x01,
	0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x73,
	0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x62, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x6f, 0x12, 0x22, 0x0a,
	0x0c, 0x62, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x69, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48,
	0x69, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x4c, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x69, 0x22, 0xdc, 0x01,
	0x0a, 0x05, 0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x64, 0x2e, 0x4b,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x68, 0x69,
	0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6c, 0x6f, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x69, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x69, 0x22, 0x47, 0x0a, 0x09,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x37, 0x0a, 0x0a, 0x4d, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x64, 0x2e, 0x4d, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xab,
	0x01, 0x0a, 0x0a, 0x41, 0x67, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a,
	0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6d, 0x64, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x48,
	0x00, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x30, 0x0a, 0x0a,
	0x74, 0x6f, 0x70, 0x4f, 0x66, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6d, 0x64, 0x2e, 0x54, 0x6f, 0x70, 0x4f, 0x66, 0x42, 0x6f, 0x6f, 0x6b, 0x73,
	0x48, 0x00, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x4f, 0x66, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x33,
	0x0a, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x64, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x8f, 0x02, 0x0a,
	0x09, 0x54, 0x6f, 0x70, 0x4f, 0x66, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x69,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x69, 0x64, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x69, 0x64,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x6b, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x73, 0x6b, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x32,
	0x34, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72,
	0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x32, 0x34, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x2f,
	0x0a, 0x0a, 0x54, 0x6f, 0x70, 0x4f, 0x66, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x04,
	0x74, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x64, 0x2e,
	0x54, 0x6f, 0x70, 0x4f, 0x66, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x73, 0x22,
	0x80, 0x01, 0x0a, 0x0a, 0x52, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x69,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x64, 0x2e, 0x52, 0x61,
	0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69,
	0x64, 0x65, 0x22, 0x37, 0x0a, 0x0b, 0x52, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x64, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x6d, 0x0a, 0x0d, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x09,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x64, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x89, 0x01, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x62, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x6d, 0x62, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x62, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6d, 0x62, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x06, 0x6b,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x64,
	0x2e, 0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x06,
	0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2a, 0x18, 0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x12, 0x07,
	0x0a, 0x03, 0x42, 0x49, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x4b, 0x10, 0x01,
	0x2a, 0x40, 0x0a, 0x0d, 0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x31, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x31, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x31, 0x35, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x48, 0x31,
	0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x48, 0x34, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x44, 0x31,
	0x10, 0x05, 0x2a, 0x25, 0x0a, 0x0e, 0x52, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x69, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x41, 0x53, 0x45, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x10, 0x01, 0x42, 0x17, 0x5a, 0x03, 0x67, 0x6f, 0x2f,
	0xaa, 0x02, 0x0f, 0x43, 0x75, 0x62, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_market_data_proto_rawDescOnce sync.Once
	file_market_data_proto_rawDescData = file_market_data_proto_rawDesc
)

func file_market_data_proto_rawDescGZIP() []byte {
	file_market_data_proto_rawDescOnce.Do(func() {
		file_market_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_market_data_proto_rawDescData)
	})
	return file_market_data_proto_rawDescData
}

var file_market_data_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_market_data_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_market_data_proto_goTypes = []interface{}{
	(Side)(0),                      // 0: md.Side
	(KlineInterval)(0),             // 1: md.KlineInterval
	(RateUpdateSide)(0),            // 2: md.RateUpdateSide
	(MarketByPriceDiff_DiffOp)(0),  // 3: md.MarketByPriceDiff.DiffOp
	(MarketByOrderDiff_DiffOp)(0),  // 4: md.MarketByOrderDiff.DiffOp
	(*MdMessage)(nil),              // 5: md.MdMessage
	(*MarketByPrice)(nil),          // 6: md.MarketByPrice
	(*MarketByPriceDiff)(nil),      // 7: md.MarketByPriceDiff
	(*MarketByOrder)(nil),          // 8: md.MarketByOrder
	(*MarketByOrderDiff)(nil),      // 9: md.MarketByOrderDiff
	(*Trades)(nil),                 // 10: md.Trades
	(*Summary)(nil),                // 11: md.Summary
	(*Kline)(nil),                  // 12: md.Kline
	(*Heartbeat)(nil),              // 13: md.Heartbeat
	(*MdMessages)(nil),             // 14: md.MdMessages
	(*AggMessage)(nil),             // 15: md.AggMessage
	(*TopOfBook)(nil),              // 16: md.TopOfBook
	(*TopOfBooks)(nil),             // 17: md.TopOfBooks
	(*RateUpdate)(nil),             // 18: md.RateUpdate
	(*RateUpdates)(nil),            // 19: md.RateUpdates
	(*ClientMessage)(nil),          // 20: md.ClientMessage
	(*Config)(nil),                 // 21: md.Config
	(*MarketByPrice_Level)(nil),    // 22: md.MarketByPrice.Level
	(*MarketByPriceDiff_Diff)(nil), // 23: md.MarketByPriceDiff.Diff
	(*MarketByOrder_Order)(nil),    // 24: md.MarketByOrder.Order
	(*MarketByOrderDiff_Diff)(nil), // 25: md.MarketByOrderDiff.Diff
	(*Trades_Trade)(nil),           // 26: md.Trades.Trade
}
var file_market_data_proto_depIdxs = []int32{
	13, // 0: md.MdMessage.heartbeat:type_name -> md.Heartbeat
	11, // 1: md.MdMessage.summary:type_name -> md.Summary
	10, // 2: md.MdMessage.trades:type_name -> md.Trades
	8,  // 3: md.MdMessage.mboSnapshot:type_name -> md.MarketByOrder
	9,  // 4: md.MdMessage.mboDiff:type_name -> md.MarketByOrderDiff
	6,  // 5: md.MdMessage.mbpSnapshot:type_name -> md.MarketByPrice
	7,  // 6: md.MdMessage.mbpDiff:type_name -> md.MarketByPriceDiff
	12, // 7: md.MdMessage.kline:type_name -> md.Kline
	22, // 8: md.MarketByPrice.levels:type_name -> md.MarketByPrice.Level
	23, // 9: md.MarketByPriceDiff.diffs:type_name -> md.MarketByPriceDiff.Diff
	24, // 10: md.MarketByOrder.orders:type_name -> md.MarketByOrder.Order
	25, // 11: md.MarketByOrderDiff.diffs:type_name -> md.MarketByOrderDiff.Diff
	26, // 12: md.Trades.trades:type_name -> md.Trades.Trade
	1,  // 13: md.Kline.interval:type_name -> md.KlineInterval
	5,  // 14: md.MdMessages.messages:type_name -> md.MdMessage
	13, // 15: md.AggMessage.heartbeat:type_name -> md.Heartbeat
	17, // 16: md.AggMessage.topOfBooks:type_name -> md.TopOfBooks
	19, // 17: md.AggMessage.rateUpdates:type_name -> md.RateUpdates
	16, // 18: md.TopOfBooks.tops:type_name -> md.TopOfBook
	2,  // 19: md.RateUpdate.side:type_name -> md.RateUpdateSide
	18, // 20: md.RateUpdates.updates:type_name -> md.RateUpdate
	13, // 21: md.ClientMessage.heartbeat:type_name -> md.Heartbeat
	21, // 22: md.ClientMessage.config:type_name -> md.Config
	1,  // 23: md.Config.klines:type_name -> md.KlineInterval
	0,  // 24: md.MarketByPrice.Level.side:type_name -> md.Side
	0,  // 25: md.MarketByPriceDiff.Diff.side:type_name -> md.Side
	3,  // 26: md.MarketByPriceDiff.Diff.op:type_name -> md.MarketByPriceDiff.DiffOp
	0,  // 27: md.MarketByOrder.Order.side:type_name -> md.Side
	0,  // 28: md.MarketByOrderDiff.Diff.side:type_name -> md.Side
	4,  // 29: md.MarketByOrderDiff.Diff.op:type_name -> md.MarketByOrderDiff.DiffOp
	0,  // 30: md.Trades.Trade.aggressingSide:type_name -> md.Side
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_market_data_proto_init() }
func file_market_data_proto_init() {
	if File_market_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_market_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketByPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketByPriceDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketByOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketByOrderDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trades); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Summary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopOfBook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopOfBooks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateUpdates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketByPrice_Level); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketByPriceDiff_Diff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketByOrder_Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketByOrderDiff_Diff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trades_Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_market_data_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*MdMessage_Heartbeat)(nil),
		(*MdMessage_Summary)(nil),
		(*MdMessage_Trades)(nil),
		(*MdMessage_MboSnapshot)(nil),
		(*MdMessage_MboDiff)(nil),
		(*MdMessage_MbpSnapshot)(nil),
		(*MdMessage_MbpDiff)(nil),
		(*MdMessage_Kline)(nil),
	}
	file_market_data_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*AggMessage_Heartbeat)(nil),
		(*AggMessage_TopOfBooks)(nil),
		(*AggMessage_RateUpdates)(nil),
	}
	file_market_data_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*ClientMessage_Heartbeat)(nil),
		(*ClientMessage_Config)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_market_data_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_market_data_proto_goTypes,
		DependencyIndexes: file_market_data_proto_depIdxs,
		EnumInfos:         file_market_data_proto_enumTypes,
		MessageInfos:      file_market_data_proto_msgTypes,
	}.Build()
	File_market_data_proto = out.File
	file_market_data_proto_rawDesc = nil
	file_market_data_proto_goTypes = nil
	file_market_data_proto_depIdxs = nil
}
